name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
permissions:
  contents: write
  
jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Get version from tag (v1.0.0 → 1.0.0)
      - name: Get version from tag
        id: get_version
        run: |
          $tag = "${{ github.ref_name }}"
          $ver = $tag.TrimStart("v")
          echo "version=$ver" >> $env:GITHUB_OUTPUT

      # Update project version in csproj
      - name: Update project version from tag
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          (Get-Content ITQuestions/ITQuestions.csproj) `
          -replace '<Version>.*</Version>', "<Version>$version</Version>" `
          -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$version</AssemblyVersion>" `
          -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$version</FileVersion>" `
          | Set-Content ITQuestions/ITQuestions.csproj

      # Setup .NET
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Build
      - name: Publish self-contained app
        run: dotnet publish ITQuestions/ITQuestions.csproj -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true /p:IncludeAllContentForSelfExtract=true /p:PublishTrimmed=false -o publish

      - name: List publish output
        run: dir publish

      # Get last commit message → changelog
      - name: Get last commit message
        id: last_commit
        shell: pwsh
        run: |
          $msg = git log -1 --pretty=%B
          echo "message=$msg" >> $env:GITHUB_OUTPUT

      # Generate update.json
      - name: Generate update.json
        shell: pwsh
        run: |
          $ver  = '${{ steps.get_version.outputs.version }}'
          $repo = '${{ github.repository }}'
          $msg  = '${{ steps.last_commit.outputs.message }}'
          if (-not $msg) { $msg = "Release v$ver" }

          $obj = [ordered]@{
            latestVersion = $ver
            downloadUrl   = "https://github.com/$repo/releases/download/v$ver/ITQuestions.exe"
            changelog     = $msg
          }
          $obj | ConvertTo-Json -Depth 5 | Out-File -FilePath update.json -Encoding utf8

      # Create zip
      - name: Create zip
        run: powershell Compress-Archive -Path publish/* -DestinationPath ITQuestions-${{ github.ref_name }}.zip

      # Upload to Release
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ITQuestions-${{ github.ref_name }}.zip
            publish/ITQuestions.exe
            update.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
